{"version":3,"file":"popup.js","sources":["../src/popup.ts"],"sourcesContent":["import { FolderVec } from './background';\r\n\r\n// フォルダ情報のインターフェース\r\nexport interface Folder {\r\n  id: string;\r\n  title: string;\r\n  score: number;\r\n}\r\n\r\n// タブ情報のインターフェース\r\nexport interface Tab {\r\n  id?: number;\r\n  url?: string;\r\n  title?: string;\r\n}\r\n\r\n// レスポンスのインターフェース\r\n// export interface AnalysisResponse {\r\n//   folders?: Folder[];\r\n//   error?: string;\r\n// }\r\nexport interface AnalysisResponse {\r\n  ok: boolean;\r\n  result: FolderVec[];\r\n}\r\n\r\n// DOMの読み込みが完了したら実行\r\ndocument.addEventListener('DOMContentLoaded', async (): Promise<void> => {\r\n  // 現在のタブの情報を取得\r\n  const tabs: Tab[] = await chrome.tabs.query({ active: true, currentWindow: true });\r\n  if (tabs.length === 0) {\r\n    showError('アクティブなタブが見つかりません');\r\n    return;\r\n  }\r\n\r\n  const currentTab: Tab = tabs[0];\r\n  \r\n  // ステータス表示を更新\r\n  updateStatus('ページを分析中!');\r\n  \r\n  try {\r\n    // バックグラウンドスクリプトにメッセージを送信してページを分析\r\n    const response: AnalysisResponse = await chrome.runtime.sendMessage({\r\n      action: 'SUGGEST_FOLDERS',\r\n      // payload: {\r\n      //   title: currentTab.title,\r\n      //   content: currentTab\r\n      // }\r\n      // url: currentTab.url,\r\n      // title: currentTab.title\r\n    });\r\n    \r\n    console.log('バックグラウンドスクリプトからの応答:', response);\r\n    \r\n    // レスポンスの存在チェックを追加\r\n    if (!response) {\r\n      showError('バックグラウンドスクリプトからの応答がありません');\r\n      return;\r\n    }\r\n    \r\n    // レスポンスを処理\r\n    // if (response.error) {\r\n    //   showError(response.error);\r\n    //   return;\r\n    // }\r\n    if (response.result && response.result.length > 0) {\r\n      // 推奨フォルダを表示\r\n      displayRecommendedFolders(response.result, currentTab);\r\n    } else {\r\n      // 推奨フォルダが見つからない場合\r\n      updateStatus('適切なフォルダが見つかりませんでした');\r\n    }\r\n  } catch (error) {\r\n    console.error('エラーが発生しました:', error);\r\n    showError('ページの分析中にエラーが発生しました');\r\n  }\r\n});\r\n\r\n// ステータス表示を更新する関数\r\nexport function updateStatus(message: string): void {\r\n  const statusElement: HTMLElement | null = document.getElementById('status');\r\n  if (statusElement) {\r\n    statusElement.textContent = message;\r\n  }\r\n}\r\n\r\n// エラーを表示する関数\r\nfunction showError(message: string): void {\r\n  updateStatus(`エラー: ${message}`);\r\n}\r\n\r\n// 推奨フォルダを表示する関数\r\nfunction displayRecommendedFolders(folders: FolderVec[], currentTab: Tab): void {\r\n  const folderListElement: HTMLElement | null = document.getElementById('folderList');\r\n  if (!folderListElement) return;\r\n  \r\n  // フォルダリストをクリア\r\n  folderListElement.innerHTML = '';\r\n  \r\n  // ステータスを更新\r\n  updateStatus('推奨フォルダ:');\r\n  \r\n  // 各フォルダのアイテムを作成\r\n  folders.forEach((folder: FolderVec) => {\r\n    const folderItem: HTMLDivElement = document.createElement('div');\r\n    folderItem.className = 'folder-item';\r\n    folderItem.dataset.folderId = folder.folderId;\r\n    \r\n    // フォルダ名と類似度スコアを表示\r\n    // const similarityPercentage: number = Math.round(folder.score * 100);\r\n    // folderItem.innerHTML = `\r\n    //   <span class=\"folder-name\">${folder.name}</span>\r\n    //   <span class=\"similarity-score\">${similarityPercentage}%</span>\r\n    // `;\r\n    folderItem.innerHTML = `\r\n      <span class=\"folder-name\">${folder.name}</span>\r\n    `;\r\n    // クリックイベントを追加\r\n    folderItem.addEventListener('click', async (): Promise<void> => {\r\n      try {\r\n        // ブックマークを作成\r\n        await chrome.bookmarks.create({\r\n          parentId: folder.folderId,\r\n          title: currentTab.title,\r\n          url: currentTab.url\r\n        });\r\n        \r\n        // 成功メッセージを表示\r\n        updateStatus(`「${folder.name}」にブックマークしました`);\r\n        \r\n        // フォルダリストをクリア\r\n        folderListElement.innerHTML = '';\r\n        \r\n        // 3秒後にポップアップを閉じる\r\n        setTimeout((): void => {\r\n          window.close();\r\n        }, 3000);\r\n      } catch (error) {\r\n        console.error('ブックマーク作成中にエラーが発生しました:', error);\r\n        showError('ブックマークの作成中にエラーが発生しました');\r\n      }\r\n    });\r\n    \r\n    // フォルダリストに追加\r\n    folderListElement.appendChild(folderItem);\r\n  });\r\n} "],"names":["tabs","showError","currentTab","updateStatus","response","displayRecommendedFolders","error","message","statusElement","folders","folderListElement","folder","folderItem"],"mappings":"AA2BA,SAAS,iBAAiB,mBAAoB,SAA2B,CAEjE,MAAAA,EAAc,MAAM,OAAO,KAAK,MAAM,CAAE,OAAQ,GAAM,cAAe,GAAM,EAC7E,GAAAA,EAAK,SAAW,EAAG,CACrBC,EAAU,kBAAkB,EAC5B,MAAA,CAGI,MAAAC,EAAkBF,EAAK,CAAC,EAG9BG,EAAa,UAAU,EAEnB,GAAA,CAEF,MAAMC,EAA6B,MAAM,OAAO,QAAQ,YAAY,CAClE,OAAQ,iBAAA,CAOT,EAKD,GAHQ,QAAA,IAAI,sBAAuBA,CAAQ,EAGvC,CAACA,EAAU,CACbH,EAAU,0BAA0B,EACpC,MAAA,CAQEG,EAAS,QAAUA,EAAS,OAAO,OAAS,EAEpBC,EAAAD,EAAS,OAAQF,CAAU,EAGrDC,EAAa,oBAAoB,QAE5BG,EAAO,CACN,QAAA,MAAM,cAAeA,CAAK,EAClCL,EAAU,oBAAoB,CAAA,CAElC,CAAC,EAGM,SAASE,EAAaI,EAAuB,CAC5C,MAAAC,EAAoC,SAAS,eAAe,QAAQ,EACtEA,IACFA,EAAc,YAAcD,EAEhC,CAGA,SAASN,EAAUM,EAAuB,CAC3BJ,EAAA,QAAQI,CAAO,EAAE,CAChC,CAGA,SAASF,EAA0BI,EAAsBP,EAAuB,CACxE,MAAAQ,EAAwC,SAAS,eAAe,YAAY,EAC7EA,IAGLA,EAAkB,UAAY,GAG9BP,EAAa,SAAS,EAGdM,EAAA,QAASE,GAAsB,CAC/B,MAAAC,EAA6B,SAAS,cAAc,KAAK,EAC/DA,EAAW,UAAY,cACZA,EAAA,QAAQ,SAAWD,EAAO,SAQrCC,EAAW,UAAY;AAAA,kCACOD,EAAO,IAAI;AAAA,MAG9BC,EAAA,iBAAiB,QAAS,SAA2B,CAC1D,GAAA,CAEI,MAAA,OAAO,UAAU,OAAO,CAC5B,SAAUD,EAAO,SACjB,MAAOT,EAAW,MAClB,IAAKA,EAAW,GAAA,CACjB,EAGYC,EAAA,IAAIQ,EAAO,IAAI,cAAc,EAG1CD,EAAkB,UAAY,GAG9B,WAAW,IAAY,CACrB,OAAO,MAAM,GACZ,GAAI,QACAJ,EAAO,CACN,QAAA,MAAM,wBAAyBA,CAAK,EAC5CL,EAAU,uBAAuB,CAAA,CACnC,CACD,EAGDS,EAAkB,YAAYE,CAAU,CAAA,CACzC,EACH"}